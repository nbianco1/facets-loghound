<wiki:toc max_depth="4" />

====1. What the hell?====

Yes - it's another !JavaScript thingy.  But this one might actually be very helpful.  Log Hound wasn't designed in absentia of any driving need.  On the contrary, I developed this little utility whilst wading my way through over a thousand lines of combined ECMAscript, JQuery, and Microsoft JScript, all of which were going to be used solely on IE 7 and 8.  If that doesn't scare a developer into wanting to find a better way to debug, then I don't know what would.

====2. Why???====

Firebug really isn't an option for !JavaScript problems in IE.  If your first thought-reaction to that is "Why not just use IE Web Developer Toolbar", then you haven't used WDT on large complicated !JavaScript projects.  If you have, then I sincerely hope you are getting paid more than me.

*3. Seriously?????*

Your banal questions bore me.  Bring it.

*4. Seriously - what does it do?*

As of today (9/27/2010), Log Hound is only a !JavaScript logger.  It provides a framework by which you can use !JavaScript methods to store messages in the order they were received so that they may be displayed in the Log Hound User interface.  Using the Log Hound interface, you can select which log messages to view based on several different criteria provided by the many interface controls.
In cyber-colloquial terms, it throws strings at a floating div and allows you to block/none records using multivariate analysis. Word.
A simple example of a logged message would look something like this:
{{{
window.logHound.logWarn('This is a warning message.',['methodName()','anotherTag']);
}}}

*5. What does it depend on?*
Everything Log Hound depends on is included in the zip package.  There's no dependency on JQuery, Prototype, or any other !JavaScript framework.  Log Hound uses 100% pure ECMAScript 1.2 spec JavaScript.

*6. Err... Browser Support?*
Log Hound is being coded to work perfectly in Firefox, Chrome, Opera, and probably Safari if it doesn't tick me off.  As for IE, well, I'll make an effort.  The point is that W3C standards come first.  Crappy maniacal insecure monopoly-driven browsers come second.

*7. What about {insert favourite JS framework name here}??? Why did you bother not just using {framework name here again to up it's google score}?  You are an idiot and wasting time if you don't use {name framework for third time to summon its planar avatar to destroy non-utilizing projects} instead of writing all that lame JS code.