<wiki:toc max_depth="3" />

This page lists the public functions you may use to manage how Log Hound functions.

----
= activateTagMode() =
*Usage:*
{{{
activateTagMode({String}mode);
}}}
  * mode {{{[required]}}}: The tag filter mode to activate. Must be one of the following:
    * 'any'
    * 'exc'
    * 'int'
    * 'ony'

*Description:*

Sets the active tag filter mode which will change what messages are displayed based on the tags currently listed in the "View" tag list.

*Examples:*
{{{
window.logHound.activateTagMode('any');
}}}

----
= doSetup() =
*Usage:*
{{{
doSetup()
}}}

*Description:*

This function sets up all of the internal workings of Log Hound and when the method returns, Log Hound will be completely initialised and ready to start accepting log messages. This function should only be called once during a page load, though it does protect itself from subsequent calls.

*Examples:*
{{{
window.logHound.doSetup();
}}}
----
= log() =

*Usage:*
{{{
log({String}msg, {Array}tags, {Error}errorObject, {LogHoundLevel}logLevel)
}}}

  * logLevel {{{[required]}}}: The log level of the message.
  * msg {{{[required]}}}: The message to log.
  * tags: String tags to associate with the log message.
  * errorObject: An error object to display with the message.

*Note:* The order of the arguments does not matter.  Log Hound detects the argument types and handles them as appropriate.

*Description:*

The main log function.  This function is called by all the level-specific convenience functions.

*Examples:*

There are two ways to log messages.  You can either use the log[Level]() functions which delegate to the log() function, or you can use the log() function directly:

{{{
window.logHound.log(LogHoundLevels['FATAL'],'Fatal: If you see this, your app is toast.',['Tag1','AllTags'],errObj);
}}}

You can always use the level-specific log functions which do not need the LogHoundLevel argument. The following is exactly the same as the previous example:

{{{
window.logHound.logFatal('Fatal: If you see this, your app is toast.',['Tag1','AllTags'],errObj);
}}}

----
= setKillSwitch() =
*Usage:*
{{{
setKillSwitch({boolean}killSwitch)
}}}

  * killSwitch {{{[required]}}}: true to completely deactivate Log Hound and prevent the "doSetup()" method from executing.

*Description:*

There is an internal kill switch in Log Hound that can be used to prevent the logger from initialising.  When set to true, the "doSetup()" function is short-circuited and Log Hound is effectively locked in off mode.  If subsequently set to false, a call to "doSetup()" will then execute normally.

*Examples:*
{{{
window.logHound.killSwitch(true);
}}}

----
= setLogLevel() =
*Usage:*
{{{
setLogLevel({LogHoundLevel}level)
}}}

  * LogHoundLevel {{{[required]}}}: The level object representing the level at which and above the logger will record incoming messages. 

*Description:*

Passing a LogHoundLevel object to this function sets the level at which Log Hound will log messages.  Any messages for levels below the set level will be discarded by Log Hound, gone forever.

*Examples:*
{{{
window.logHound.setLogLevel(LogHoundLevels['DEBUG']);
}}}
----