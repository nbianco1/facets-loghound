===Log Messages===
Log Hound is a !JavaScript logger.  This is to say that you can have lines like this in your code:
{{{
window.logHound.logInfo('Info: FYI...');
}}}
...and you get a log message in the Log Hound interface like this:

<img align="center" src="https://facets-loghound.googlecode.com/svn/wiki/images/exInfoMsgBrief.png"></img>

Out of the box, Log Hound supports your six basic logging levels: Fatal, Error, Warn, Info, Debug, and Trace.

----
===Define Your Own Log Levels===
You can easily define your own log levels to Log Hound.  As an example, here's how the Trace log level is defined:

{{{
function PageLogHoundLevel() {
    TraceLogHoundLevel.baseConstructor.call(this, 40, 'page', true);
}
var LogHoundLevelPreload = new Array();
LogHoundLevelPreload[0] = PageLogHoundLevel;
}}}

The important parts are to give your log level function a unique name and to be sure to include the base constructor line.  For the base constructor line:
 * 'this' = don't change this.
 * '40' = this is the integer level weight of the log message and should reflect the position the message would represent.  Trace is 50 and Fatal is 100, the intervening levels occupying the multiples of ten.  If your message is more detailed than Trace (really???), then set it at a lower number than 50.  You get the idea.
 * 'page' = the string name of the level.  Alpha characters only.  Must be unique.
 * 'true' = Whether or not the level is enabled.  This is used internally, but can be used to initially disable a logging level until it is turned on in the interface. Keep this as "true" unless you know what you are doing.

The array declaration must be done by you and must occur before the javascript include for Log Hound.  This ensures that you can create a list of log levels that will be loaded when Log Hound is initialized.  If you create the array with the name "!LogHoundLevelPreload", Log Hound will check for it and that it contains an array when the !JavaScript include is executed.  Log Hound will then attempt to load all items in the array as log level functions.
----
===Control Bar===
<img align="center" src="https://facets-loghound.googlecode.com/svn/wiki/images/exCtrlBar.png"></img>

From left to right:
 # "v" = Show more log messages.
 # "^" = Show less log messages.
 # Select box = Set new log level.  Messages will only be logged for level selected and those levels above it in the list.  This allows you to dynamically change the log level during execution of your scripts.
 # Coloured squares = Show level message toggles. Each of these coloured boxes represents a log message level.  Click on a box to hide the messages of that level in the display. Click again to show them.
 # "D" = Detail mode. This toggles the log message lines in the display to show more information about the messages.
 # Search text box = As you type in this text field, Log Hound will match the entered text to text in any of the messages and hide those messages that don't match.  Clear the field to show all messages again.

----
===Message Tags===
Logged messages can be tagged.  Tags allow you to manipulate and search through the log messages in new and unique ways.  Tags are applied by adding an array argument to the log method call:

{{{
window.logHound.logInfo('Info: FYI...',['Tag3','AllTags']);
}}}

In this case the tags for the message are "Tag3" and "!AllTags".  Other tags you could add to a message are: 
 # the name of the function the message is logged in
 # the name of the script the message is from

Tags can be utilized by the Log Hound interface with the tag controls:

<img align="center" src="https://facets-loghound.googlecode.com/svn/wiki/images/exTagCtrls.png"></img>

 # "A" = Any: Messages sporting any of the tags listed in the "Viewing" column will be display, and all others will be hidden.
 # "I" = Intersection: Only messages with all the tags listed in the "Viewing" column will be displayed.
 # "O" = Only: Only messages with all the tags listed in the "Viewing" column _and no other tags_ will be displayed.
 # "E" = Exclusion: Only messages that have _none_ of the tags in the "Viewing" column will be visible.
----
===Log Errors===
Log Hound will pretty-print error information if you pass in an error object.
{{{
try {
    undefinedVar.
} catch(err) {
    window.logHound.logInfo('undefinedVar not defined.',['Tag3','AllTags'],err);
}
}}}